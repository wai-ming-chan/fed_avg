{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/wai-ming-chan/fed_avg/blob/main/sanityCheck_MNIST.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Mb6i00YcPZuK"
      },
      "source": [
        "# Demo program to train MNIST with Pytorch (Centralized training)\n",
        "\n",
        "Reference: [https://meinkappa.github.io/blog/2021/09/16/MNIST-In-Pytorch.html](https://meinkappa.github.io/blog/2021/09/16/MNIST-In-Pytorch.html)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "1oMz_Z7RPJUY",
        "outputId": "9322909b-61ee-44a5-9194-b980545f9fb5"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'svg'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "# import libraries\n",
        "import torch\n",
        "from torch import nn\n",
        "from torch.utils.data import DataLoader\n",
        "from torchvision import datasets\n",
        "from torchvision.transforms import ToTensor, Lambda\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "#-----------------------------------------------------------------------\n",
        "# libraries for pyTorch model Visualization\n",
        "! pip install -q torchview\n",
        "! pip install -q -U graphviz\n",
        "\n",
        "import torchvision\n",
        "\n",
        "from torchview import draw_graph\n",
        "from torch import nn\n",
        "import torch\n",
        "import graphviz\n",
        "\n",
        "# when running on VSCode run the below command\n",
        "# svg format on vscode does not give desired result\n",
        "graphviz.set_jupyter_format('png')\n",
        "#-----------------------------------------------------------------------\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rVA-E840a8nV"
      },
      "source": [
        "### Loading dataset\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 652
        },
        "id": "fPbRQJU1QAsg",
        "outputId": "455a20ff-d702-4b62-e5c4-c802399e118c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "device:  cpu\n",
            "Dataset MNIST\n",
            "    Number of datapoints: 60000\n",
            "    Root location: data\n",
            "    Split: Train\n",
            "    StandardTransform\n",
            "Transform: ToTensor()\n",
            "training data size:  60000\n",
            "test data size:  10000\n",
            "torch.Size([1, 28, 28])\n",
            "torch.Size([28, 28])\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x720 with 8 Axes>"
            ],
            "image/png": "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e9G///u/Z3WrL0fUtfp39dhjj2X17Nmzs/pzn/tc2zH1LzqsvvrqjTG/+tWvsrq+KGor9Qb5b37zm1n91ltvtb3GYFnYfeQJDwBQPIEHACiewAMAFK+oHp677767z59vv/32jWPPPfdcn2OWWWaZxrFf/vKXWV3vC9l0000bYxalV2iolPK5+aI444wzGscOPvjgrK5/Bt6qh2e11VbL6j322COr+/o9W5hWm+8deeSRWf3yyy8P+LqDRQ/P4qn38LTq8+mE+iaVw2lxwl59L6q/Z0yZMiWrR48e3fYarXp4FuV945577snq+kKprfpz/umf/qnPa37ve99rHPv617+e1b///e/7O8VBp4cHABixBB4AoHgCDwBQvKI2Dx0MF198cePY+9///qxelM0kGR4+//nPN46NGpX/Whx44IFZ/eUvf7ntdd/2tvy/JebNm9c4p94bdNBBB2V1q3uPctV7aeo9Hccee2xjTL2Poj/qvULDqYenFxxzzDGNY/U1aeq+853vNI7V+35aqZ9z6KGHZnV9A8+I5npz9fuoP31BN9xwQ1YfcMABbcf0Ak94AIDiCTwAQPEEHgCgeAIPAFC8ohcerG/y2Wrz0FmzZmX1FltskdWtGvrq/8zqC9Edfvjhbec6nPTqYl+Dpb4h5/XXXz/ga9QbBVstPHncccdl9QUXXDDg1xlOLDw49DqxWOFw2mC0F96LLr300sax3XbbLatPOeWUrP7a177WGLMom2u+4x3v6LNu5YorrsjqVpvUXnfddVn96U9/Oquffvrpfs5weLDwIAAwYgk8AEDxBB4AoHhFLzxY3xi01Uah9UXl6gsstepxqh+bMWPGok6RYWjfffft+DXvv//+xrFe79mhN7VbJI++7b333o1j48aNy+o//OEPWb0o/TqtvPrqq1ldX7w0otkbWN8stn6NiIjJkydnda/17PSXJzwAQPEEHgCgeAIPAFC8onp46uvs1DdsbPW5ZLuN1VqtUVFfu+eOO+4Y0DwZPsaMGdM4NmHChAFfZ+bMmVm93nrrZXV9bZ+IiP333z+rzz///AG/LounviZJfzbW7NZmm53aPJTOe+yxx7ryuh/84Acbx4488sg+x1xyySWNY7/+9a87NqfhzBMeAKB4Ag8AUDyBBwAonsADABSvqKbluvomnu9///sb56y44opZ/dBDD2X1UUcd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2aVLM6ETJk2alNU777xzVrdaJLLeo3XZZZdl9Ve+8pXGmCeeeGLRJthjPOEBAIon8AAAxRN4AIDipb7WYEgp9dQCDfU1J4488sis/uY3v9kYc+GFF2b1008/3fF59ceKK67YOPbss88OyWtXVZXan7Xoeu0+qtt6662z+kMf+lDjnO9+97tZPWfOnAG/Tn2jx1mzZjXOefe7353V9913X9u5vfHGGwOey6IYzPuo1++hwbLBBhtk9Q033JDVrTYPnT59elYfffTRWd3Nfo6R/F605ZZbNo5dccUVWb3CCitkdX1NuIj26yr993//d+NYvd912rRpWT137tw+rzncLOw+8oQHACiewAMAFE/gAQCKJ/AAAMUrauHB3XbbLavPO++8rD755JOHcjoDMlQNyrS36qqrZvVPf/rTrF5iiSUaY/7hH/4hq/fcc88Bv+5RRx2V1a0a2etOO+20rB6qBmWG3qhRzbfrT33qU1ldb2p/4YUXGmMmTpzYyWmxiEaPHp3Vrb5UU29S7oQ111yzcez000/P6vqXLq688sqOz6MbPOEBAIon8AAAxRN4AIDiFdXD88wzz2T18ssv36WZ0CuWWmqpxrELLrggq1v1TtQ99dRTA37tei/QFltskdWtFhV78803s/ruu+8e8OvSmz7zmc80jn3hC1/owkzohG233TarP/jBDw74Gscff3zjWH0R1HrPztVXX90Ys+yyy2b11KlTs7rVApb11+kFnvAAAMUTeACA4gk8AEDxBB4AoHhFNS0/9NBDWX3AAQdk9YknntgY87vf/a7j82jVbFpfQGqvvfbK6h122KEx5qCDDsrqbu5iXKqxY8c2jm211VZZXd99uNW/h1NOOWXAr33wwQdn9Wabbdbn60Y0mwlb7ahOGd7znvdk9X777dd2zNNPP53Ve++9d0fnROdMmDAhq1v9vVFXb1I+9thj246pv19tvfXWjXPqX34YM2ZMVm+zzTaNMZqWAQCGIYEHACiewAMAFK+oHp4ZM2ZkdX2TvM9+9rONMV/84hcX+3U//vGPZ/UnPvGJxjkf/ehHs/r+++/P6labs+nZGXxHH330gMf85Cc/aRz73//93z7HtFrgsNV90s6PfvSjAY+hN2233XZZvckmm7QdU99M9NZbb+3klOigv/3bv83qVj17dZ3om2m1SGr9tev15ptv3hhT7/OZO3fuYs9tsHnCAwAUT+ABAIon8AAAxUt9fW6YUmr/oeIwdvbZZ2f1/vvv3zhnjTXWyOr6OhZ77LFHY8x3vvOdrJ43b15WX3HFFY0xU6ZMyerZs2dn9VtvvdUYM1Sqqmq/AMRiGE730frrr5/VDzzwQOOc+u/Ek08+mdX/+I//2BgzZ86cPl93xx13bBz74Q9/2OeYBx98sHFso4026nNMNw3mfTSc7qHBUt9Mst6TOHr06LbXWG211bL68ccfX/yJDaGR9F5Uf19ZaaWVGufcfPPNWf0v//IvWf3GG2+0fZ2/+7u/y+pWPYjrrbdeVvenn6h+v95yyy1txwyVhd1HnvAAAMUTeACA4gk8AEDxBB4AoHhFLTxYd/nll2d1q4Xerr322qx++OGHs3rXXXdtjJk+fXpWn3DCCVk9c+bMAc2ToXPBBRcMeMwNN9yQ1e0alFv58Ic/POAxZ5555oDH0BtaNSDXv1RRP+f1119vjJk0aVJW1xthGb76s/Dghz70oayuNwq3akCuqy9WuO666/Z3in1qtYDhcOcJDwBQPIEHACiewAMAFK/ohQfrWm28OGHChKx++eWXs/qggw5qjJk2bVpnJ9ZlpS72VV9wK6LZX/XOd76zcU79d2LPPffM6vvuu68x5iMf+UhWL7nkkll94oknNsaMHTu2ceyvtfp8vt6H9uKLL/Z5jaFk4cH+22CDDRrHWt1Xf63VRrcnnXRSx+Y0HJT6XtTKTjvtlNX1hSb7o9U9s/HGGw/4Oinl/9j7s/DgqaeemtWd2Ii7Uyw8CACMWAIPAFA8gQcAKF7R6/CcfPLJWV3feC2i+RnoWmutldWLsuYK3bHUUktl9TXXXNM4p762SavPquvHLrvssgHPpT+fibf7nHyHHXZoHHv22Wez+qKLLsrqo446qu0Yhl597ZMrr7xywNdotZksvetnP/tZVl988cWNc3bZZZesrvccturX6U//TTv9uUZ/1gAabjzhAQCKJ/AAAMUTeACA4gk8AEDximpa3meffbK6vrHeD37wg8aYyZMnZ/Wtt96a1a0aX9/1rnct4gwZTPWG3Q033LBLMxk8o0blv7L/+q//mtW/+c1vGmNOO+20wZwS/bDeeutl9eqrr952TL3ZXPN5WV555ZWs/tSnPtU4p75Ybn0R1P747W9/m9XXXXdd45w777yzz2s88cQTjWMPPPDAgOfSbZ7wAADFE3gAgOIJPABA8Yrq4dlss82yur6o4Be+8IXGmOeffz6rd99996z+5S9/2Riz4447ZvWPf/zjAc2TwfGxj32sa689a9asrF5nnXUGfI277rorq8eNG9c4Z+WVV87q1157Lav/4z/+Y8Cvy+CrL3jZHzfffHNW/9d//VenpkOPuPrqq/ush8qYMWMax+oLvfYCT3gAgOIJPABA8QQeAKB4PdvDs9JKKzWOTZw4Mau/+93vZnW9X6eV+++/P6svvfTSxjnnnXdeVtfX2Jg7d27b12F4eOSRRxrH6uv51Df5a2X8+PFZfdVVV7Ud861vfSurjznmmKxeeumlG2PWWGONrK5vJvjrX/+67esy+Lbaaqusnjp1atsxd9xxR1YfeOCBnZwSRETEYYcd1jhW3+y4rtVGoU899VTH5jRUPOEBAIon8AAAxRN4AIDiCTwAQPF6tmm5vshgRMSyyy6b1Zdddtliv86UKVMaxz75yU9mdX0xOE3L3VFvJl9ttdUa59SbiTu1mFv9fmzXBBgR8fOf/zyr582bl9X1zQUjenPDvtK1WiDyyiuvzOpWDeh1N954Y1a/9NJLizUv6K+qqvqsS+EJDwBQPIEHACiewAMAFK9ne3jeeOONxrF6D8Saa66Z1ffcc8+AX2fmzJltz9luu+2y2uJv3XH22Wd37bXrm87WPwN/8cUXG2MefPDBQZ0TQ6O++GNExPLLL9/nmFY9Em+99VbH5gQLs+eee3Z7Cl3jCQ8AUDyBBwAonsADABSvZ3t46mtWRDQ3/tx1112zetq0aQN+nVZrbNRNnz59wNeld7W6J9773vf2OebRRx9tHHvyySc7NSW66KyzzhrwmAsvvLBx7OSTT+7AbCC31lprZXW9t7U/7r333k5Np6s84QEAiifwAADFE3gAgOIJPABA8Xq2abmVGTNmZPXRRx+d1ePHj2+MueWWW7K6vmBY/ecREbNmzcrqF154YSDTpMe1WiCuvuhl3cMPPzxY06EH1L9kcdhhh3VpJow0G264YVYvt9xyjXPabXZ8++23d3JKXeMJDwBQPIEHACiewAMAFK+oHp5/+7d/y+r6Z5dXX311Y8zFF1+c1TvssENWjxkzpjFm3XXXzeqXXnppQPOktz3xxBONY/WNSydNmpTV9fuMkeXMM8/M6j/+8Y9dmgkjXauNa9uds/HGGzfOueuuuzo2p6HiCQ8AUDyBBwAonsADABRP4AEAipf6amBKKbXvbhrG1lhjjay+6aabGuesssoqWf3yyy9n9U477dQY02oxwl5WVVXfq04tpl6/j+ifwbyP3EMjg/eizttjjz2yetq0aY1z6gsP1nPBRz7ykcaY4dy0vLD7yBMeAKB4Ag8AUDyBBwAoXlELD9bNnj07q9/3vvd1aSYAMPR++9vfZnWrjUC33HLLrD7vvPOy+t577+38xLrAEx4AoHgCDwBQPIEHAChe0evw0D/WvqATrMPD4vJeRCdYhwcAGLEEHgCgeAIPAFA8gQcAKJ7AAwAUT+ABAIon8AAAxRN4AIDi9bnwIABACTzhAQCKJ/AAAMUTeACA4gk8AEDxBB4AoHgCDwBQvP8PwR7Oj+mnfT8AAAAASUVORK5CYII=\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# grab MNIST data with torchvision datasets\n",
        "## We can tell Pytorch how to manipulate the dataset by giving details.\n",
        "##\n",
        "### root: Where to store the data. We are storing it in data directory.\n",
        "### train: Whether to grab training dataset or testing dataset. \n",
        "###         Given True value, training_data is a training dataset from MNIST. \n",
        "###         On the other hand, test_data is a testing dataset from MNIST.\n",
        "### download: Whether to download if data is not already in root. We passed True to download the dataset.\n",
        "### transform: What to do with data. We are converting our images of handwritten digits into Pytorch tensors so that we can train our model.\n",
        "\n",
        "training_data = datasets.MNIST(\n",
        "    root='data',\n",
        "    train=True,\n",
        "    download=True,\n",
        "    transform=ToTensor()\n",
        ")\n",
        "\n",
        "test_data = datasets.MNIST(\n",
        "    root='data',\n",
        "    train=False,\n",
        "    download=True,\n",
        "    transform=ToTensor()\n",
        ")\n",
        "\n",
        "# Set GPU or CPU device. If GPU is available, we use it to speed up the training\n",
        "device = 'cuda' if torch.cuda.is_available() else 'cpu'\n",
        "print('device: ', device)\n",
        "\n",
        "# check the dimension of data\n",
        "print(training_data)\n",
        "print('training data size: ', len(training_data) )\n",
        "print('test data size: ', len(test_data) )\n",
        "print(training_data[0][0].shape)\n",
        "print(training_data[0][0].squeeze().shape)\n",
        "# plt.imshow(training_data[len(training_data)-1][0].squeeze(), cmap=\"gray\");\n",
        "# print('label: ', training_data[len(training_data)-1][1])\n",
        "\n",
        "\n",
        "figure = plt.figure(figsize=(10,10))\n",
        "cols, rows = 4, 2\n",
        "for i in range(1, cols * rows + 1):\n",
        "    sample_idx = torch.randint(len(training_data), size=(1,)).item()\n",
        "    img, label = training_data[sample_idx]\n",
        "    figure.add_subplot(rows, cols, i)\n",
        "    plt.title(label)\n",
        "    plt.axis(\"off\")\n",
        "    plt.imshow(img.squeeze(), cmap=\"gray\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_7gGRZDnVpPn",
        "outputId": "71995a5e-2142-4841-a4a1-74e1da2cf665"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "156.25 157\n"
          ]
        }
      ],
      "source": [
        "# create a dataloader. \n",
        "## A dataloader divides our data by a given batch_size and hands out each one to our model for training\n",
        "## Our train_dataloader will have 64 images per batch, which makes a total of 157 batches.\n",
        "bs=64\n",
        "train_dataloader = DataLoader(training_data, batch_size=bs)\n",
        "test_dataloader = DataLoader(test_data, batch_size=bs)\n",
        "\n",
        "print(10000/64, len(test_dataloader))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "xFw7ceI7ax8l",
        "outputId": "e1f5f963-b639-4ff5-f35d-b7db4898ebb9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Help on function summary in module torchsummary.torchsummary:\n",
            "\n",
            "summary(model, input_size, batch_size=-1, device='cuda')\n",
            "\n",
            "----------------------------------------------------------------\n",
            "        Layer (type)               Output Shape         Param #\n",
            "================================================================\n",
            "           Flatten-1                  [64, 784]               0\n",
            "            Linear-2                  [64, 200]         157,000\n",
            "              ReLU-3                  [64, 200]               0\n",
            "            Linear-4                  [64, 200]          40,200\n",
            "              ReLU-5                  [64, 200]               0\n",
            "            Linear-6                   [64, 10]           2,010\n",
            "================================================================\n",
            "Total params: 199,210\n",
            "Trainable params: 199,210\n",
            "Non-trainable params: 0\n",
            "----------------------------------------------------------------\n",
            "Input size (MB): 0.19\n",
            "Forward/backward pass size (MB): 0.78\n",
            "Params size (MB): 0.76\n",
            "Estimated Total Size (MB): 1.73\n",
            "----------------------------------------------------------------\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<graphviz.graphs.Digraph at 0x7f4fa68c1400>"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "# setup our model now.\n",
        "\n",
        "class NeuralNetwork(nn.Module):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        self.flatten = nn.Flatten()\n",
        "        self.linear_relu_stack = nn.Sequential(\n",
        "            nn.Linear(28*28, 512),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(512, 10)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.flatten(x)\n",
        "        logits = self.linear_relu_stack(x)\n",
        "        return logits\n",
        "\n",
        "# Feed our model into GPU now if there is one.\n",
        "model = NeuralNetwork().to(device)\n",
        "# print(model)\n",
        "\n",
        "from torchsummary import summary\n",
        "help(summary)\n",
        "# summary(model, input_size=(1,784), batch_size=bs)\n",
        "\n",
        "\n",
        "# Model 1: 2NN\n",
        "class MNIST_2NN(nn.Module):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        self.flatten = nn.Flatten()\n",
        "        self.linear_relu_stack = nn.Sequential(\n",
        "            nn.Linear(28*28, 200),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(200, 200),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(200, 10)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.flatten(x)\n",
        "        logits = self.linear_relu_stack(x)\n",
        "        return logits\n",
        "\n",
        "\n",
        "model_2NN = MNIST_2NN().to(device)\n",
        "summary(model_2NN, input_size=(1,784), batch_size=bs)\n",
        "\n",
        "\n",
        "model_graph = draw_graph(\n",
        "  model_2NN, \n",
        "  input_size=(bs,784), \n",
        "  graph_name='my2NN',\n",
        "  hide_inner_tensors=True,\n",
        "  hide_module_functions=False,\n",
        "  expand_nested=True,\n",
        "  roll=True, # rolls recursive models\n",
        "  save_graph=True\n",
        ")\n",
        "model_graph.visual_graph\n",
        "#-----------------------------------------------------------------------"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AzC4m8_faVP4"
      },
      "source": [
        "### Visualization of our defined models"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "3x6lqgb7bEdf"
      },
      "outputs": [],
      "source": [
        "if False:\n",
        "  # Visualization of model and trace (method 1: Torchviz )\n",
        "  ## ref: https://github.com/szagoruyko/pytorchviz\n",
        "  !pip install torchviz\n",
        "  from torchviz import make_dot\n",
        "\n",
        "  # model = nn.Sequential()\n",
        "  # model.add_module('W0', nn.Linear(8, 16))\n",
        "  # model.add_module('tanh', nn.Tanh())\n",
        "  # model.add_module('W1', nn.Linear(16, 1))\n",
        "  # make_dot(y.mean(), params=dict(model.named_parameters()), show_attrs=True, show_saved=True)\n",
        "\n",
        "  # x = torch.randn(1, 8)\n",
        "  # y = model(x)\n",
        "  # print('x: ', x)\n",
        "  # print('y: ', y)\n",
        "\n",
        "  model = NeuralNetwork().to(device)\n",
        "  sample_idx = torch.randint(len(training_data), size=(1,)).item() # randomly pick one sample\n",
        "  img, label = training_data[sample_idx]\n",
        "  y = model(img)\n",
        "  make_dot(y.mean(), params=dict(model.named_parameters()), show_attrs=True, show_saved=True)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "zLyKLaivn9Vy"
      },
      "outputs": [],
      "source": [
        "if False:\n",
        "  # Visualization of pyTorch model (method 2: torchview)\n",
        "  # source: https://github.com/mert-kurttutan/torchview\n",
        "  ! pip install -q torchview\n",
        "  ! pip install -q -U graphviz\n",
        "\n",
        "  import torchvision\n",
        "\n",
        "  from torchview import draw_graph\n",
        "  from torch import nn\n",
        "  import torch\n",
        "  import graphviz\n",
        "\n",
        "  # when running on VSCode run the below command\n",
        "  # svg format on vscode does not give desired result\n",
        "  graphviz.set_jupyter_format('png')\n",
        "\n",
        "  summary(model, input_size=(1,784), batch_size=64)\n",
        "\n",
        "  batch_size=64\n",
        "  model_graph = draw_graph(\n",
        "    model, \n",
        "    input_size=(batch_size,784), \n",
        "    graph_name='myNN',\n",
        "    hide_inner_tensors=True,\n",
        "    hide_module_functions=False,\n",
        "    expand_nested=True,\n",
        "    roll=True, # rolls recursive models\n",
        "    save_graph=True\n",
        "  )\n",
        "  model_graph.visual_graph\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LfoM0sTYanZ3"
      },
      "source": [
        "### Some model hyperparameters setting"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "a3zrsL8Ca4Wy",
        "outputId": "8387e04d-95eb-4bdb-f6f9-0ff7ee944e81"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[epoch: 0\t Train loss: 2.285749, Accuracy: 28.3%, Test loss: 2.270344 \n",
            "[epoch: 1\t Train loss: 2.243806, Accuracy: 51.4%, Test loss: 2.223666 \n",
            "[epoch: 2\t Train loss: 2.171041, Accuracy: 63.4%, Test loss: 2.144023 \n",
            "[epoch: 3\t Train loss: 2.037203, Accuracy: 68.0%, Test loss: 2.002071 \n",
            "[epoch: 4\t Train loss: 1.808247, Accuracy: 70.9%, Test loss: 1.764911 \n",
            "[epoch: 5\t Train loss: 1.491519, Accuracy: 74.4%, Test loss: 1.447665 \n",
            "[epoch: 6\t Train loss: 1.179657, Accuracy: 78.1%, Test loss: 1.152238 \n",
            "[epoch: 7\t Train loss: 0.941399, Accuracy: 79.8%, Test loss: 0.942403 \n",
            "[epoch: 8\t Train loss: 0.771479, Accuracy: 81.4%, Test loss: 0.802046 \n",
            "[epoch: 9\t Train loss: 0.647705, Accuracy: 82.8%, Test loss: 0.704598 \n",
            "[epoch: 10\t Train loss: 0.555138, Accuracy: 84.1%, Test loss: 0.633785 \n",
            "[epoch: 11\t Train loss: 0.484727, Accuracy: 85.0%, Test loss: 0.580421 \n",
            "[epoch: 12\t Train loss: 0.430369, Accuracy: 86.0%, Test loss: 0.539028 \n",
            "[epoch: 13\t Train loss: 0.387838, Accuracy: 86.6%, Test loss: 0.506135 \n",
            "[epoch: 14\t Train loss: 0.354060, Accuracy: 87.3%, Test loss: 0.479472 \n",
            "[epoch: 15\t Train loss: 0.326703, Accuracy: 87.6%, Test loss: 0.457484 \n",
            "[epoch: 16\t Train loss: 0.304276, Accuracy: 88.1%, Test loss: 0.439086 \n",
            "[epoch: 17\t Train loss: 0.285530, Accuracy: 88.5%, Test loss: 0.423509 \n",
            "[epoch: 18\t Train loss: 0.269607, Accuracy: 88.8%, Test loss: 0.410174 \n",
            "[epoch: 19\t Train loss: 0.255944, Accuracy: 89.0%, Test loss: 0.398658 \n",
            "[epoch: 20\t Train loss: 0.243979, Accuracy: 89.2%, Test loss: 0.388619 \n",
            "[epoch: 21\t Train loss: 0.233419, Accuracy: 89.5%, Test loss: 0.379793 \n",
            "[epoch: 22\t Train loss: 0.224015, Accuracy: 89.6%, Test loss: 0.371977 \n",
            "[epoch: 23\t Train loss: 0.215566, Accuracy: 89.7%, Test loss: 0.364997 \n",
            "[epoch: 24\t Train loss: 0.207904, Accuracy: 89.9%, Test loss: 0.358715 \n",
            "[epoch: 25\t Train loss: 0.200938, Accuracy: 90.1%, Test loss: 0.353024 \n",
            "[epoch: 26\t Train loss: 0.194569, Accuracy: 90.2%, Test loss: 0.347833 \n",
            "[epoch: 27\t Train loss: 0.188720, Accuracy: 90.3%, Test loss: 0.343068 \n",
            "[epoch: 28\t Train loss: 0.183297, Accuracy: 90.4%, Test loss: 0.338666 \n",
            "[epoch: 29\t Train loss: 0.178315, Accuracy: 90.5%, Test loss: 0.334587 \n",
            "[epoch: 30\t Train loss: 0.173672, Accuracy: 90.6%, Test loss: 0.330781 \n",
            "[epoch: 31\t Train loss: 0.169332, Accuracy: 90.7%, Test loss: 0.327221 \n",
            "[epoch: 32\t Train loss: 0.165299, Accuracy: 90.7%, Test loss: 0.323872 \n",
            "[epoch: 33\t Train loss: 0.161504, Accuracy: 90.8%, Test loss: 0.320704 \n",
            "[epoch: 34\t Train loss: 0.158021, Accuracy: 90.8%, Test loss: 0.317703 \n",
            "[epoch: 35\t Train loss: 0.154776, Accuracy: 90.8%, Test loss: 0.314848 \n",
            "[epoch: 36\t Train loss: 0.151742, Accuracy: 90.9%, Test loss: 0.312120 \n",
            "[epoch: 37\t Train loss: 0.148904, Accuracy: 91.0%, Test loss: 0.309516 \n",
            "[epoch: 38\t Train loss: 0.146186, Accuracy: 91.1%, Test loss: 0.307009 \n",
            "[epoch: 39\t Train loss: 0.143598, Accuracy: 91.2%, Test loss: 0.304594 \n",
            "[epoch: 40\t Train loss: 0.141164, Accuracy: 91.2%, Test loss: 0.302272 \n",
            "[epoch: 41\t Train loss: 0.138897, Accuracy: 91.3%, Test loss: 0.300024 \n",
            "[epoch: 42\t Train loss: 0.136712, Accuracy: 91.4%, Test loss: 0.297848 \n",
            "[epoch: 43\t Train loss: 0.134620, Accuracy: 91.5%, Test loss: 0.295738 \n",
            "[epoch: 44\t Train loss: 0.132631, Accuracy: 91.6%, Test loss: 0.293682 \n",
            "[epoch: 45\t Train loss: 0.130724, Accuracy: 91.6%, Test loss: 0.291692 \n",
            "[epoch: 46\t Train loss: 0.128862, Accuracy: 91.7%, Test loss: 0.289743 \n",
            "[epoch: 47\t Train loss: 0.127125, Accuracy: 91.7%, Test loss: 0.287840 \n",
            "[epoch: 48\t Train loss: 0.125548, Accuracy: 91.8%, Test loss: 0.285982 \n",
            "[epoch: 49\t Train loss: 0.124041, Accuracy: 91.9%, Test loss: 0.284162 \n",
            "[epoch: 50\t Train loss: 0.122571, Accuracy: 91.9%, Test loss: 0.282380 \n",
            "[epoch: 51\t Train loss: 0.121257, Accuracy: 92.0%, Test loss: 0.280636 \n",
            "[epoch: 52\t Train loss: 0.119958, Accuracy: 92.0%, Test loss: 0.278917 \n",
            "[epoch: 53\t Train loss: 0.118705, Accuracy: 92.0%, Test loss: 0.277220 \n",
            "[epoch: 54\t Train loss: 0.117532, Accuracy: 92.1%, Test loss: 0.275554 \n",
            "[epoch: 55\t Train loss: 0.116479, Accuracy: 92.2%, Test loss: 0.273915 \n",
            "[epoch: 56\t Train loss: 0.115470, Accuracy: 92.2%, Test loss: 0.272298 \n",
            "[epoch: 57\t Train loss: 0.114514, Accuracy: 92.2%, Test loss: 0.270697 \n",
            "[epoch: 58\t Train loss: 0.113520, Accuracy: 92.3%, Test loss: 0.269111 \n",
            "[epoch: 59\t Train loss: 0.112606, Accuracy: 92.3%, Test loss: 0.267556 \n",
            "[epoch: 60\t Train loss: 0.111383, Accuracy: 92.4%, Test loss: 0.266021 \n",
            "[epoch: 61\t Train loss: 0.110131, Accuracy: 92.4%, Test loss: 0.264508 \n",
            "[epoch: 62\t Train loss: 0.108873, Accuracy: 92.5%, Test loss: 0.263016 \n",
            "[epoch: 63\t Train loss: 0.107639, Accuracy: 92.6%, Test loss: 0.261542 \n",
            "[epoch: 64\t Train loss: 0.106472, Accuracy: 92.7%, Test loss: 0.260088 \n",
            "[epoch: 65\t Train loss: 0.105316, Accuracy: 92.8%, Test loss: 0.258651 \n",
            "[epoch: 66\t Train loss: 0.104193, Accuracy: 92.8%, Test loss: 0.257224 \n",
            "[epoch: 67\t Train loss: 0.103003, Accuracy: 92.8%, Test loss: 0.255808 \n",
            "[epoch: 68\t Train loss: 0.101830, Accuracy: 92.8%, Test loss: 0.254408 \n",
            "[epoch: 69\t Train loss: 0.100659, Accuracy: 92.9%, Test loss: 0.253018 \n",
            "[epoch: 70\t Train loss: 0.099520, Accuracy: 92.9%, Test loss: 0.251645 \n",
            "[epoch: 71\t Train loss: 0.098385, Accuracy: 92.9%, Test loss: 0.250280 \n",
            "[epoch: 72\t Train loss: 0.097289, Accuracy: 93.0%, Test loss: 0.248934 \n",
            "[epoch: 73\t Train loss: 0.096238, Accuracy: 93.0%, Test loss: 0.247600 \n",
            "[epoch: 74\t Train loss: 0.095202, Accuracy: 93.1%, Test loss: 0.246278 \n",
            "[epoch: 75\t Train loss: 0.094205, Accuracy: 93.1%, Test loss: 0.244968 \n",
            "[epoch: 76\t Train loss: 0.093191, Accuracy: 93.2%, Test loss: 0.243668 \n",
            "[epoch: 77\t Train loss: 0.092204, Accuracy: 93.2%, Test loss: 0.242380 \n",
            "[epoch: 78\t Train loss: 0.091237, Accuracy: 93.2%, Test loss: 0.241105 \n",
            "[epoch: 79\t Train loss: 0.090287, Accuracy: 93.3%, Test loss: 0.239837 \n",
            "[epoch: 80\t Train loss: 0.089348, Accuracy: 93.4%, Test loss: 0.238579 \n",
            "[epoch: 81\t Train loss: 0.088427, Accuracy: 93.4%, Test loss: 0.237329 \n",
            "[epoch: 82\t Train loss: 0.087528, Accuracy: 93.4%, Test loss: 0.236087 \n",
            "[epoch: 83\t Train loss: 0.086630, Accuracy: 93.5%, Test loss: 0.234849 \n",
            "[epoch: 84\t Train loss: 0.085750, Accuracy: 93.5%, Test loss: 0.233621 \n",
            "[epoch: 85\t Train loss: 0.084919, Accuracy: 93.5%, Test loss: 0.232404 \n",
            "[epoch: 86\t Train loss: 0.084107, Accuracy: 93.5%, Test loss: 0.231195 \n",
            "[epoch: 87\t Train loss: 0.083315, Accuracy: 93.6%, Test loss: 0.229992 \n",
            "[epoch: 88\t Train loss: 0.082513, Accuracy: 93.7%, Test loss: 0.228795 \n",
            "[epoch: 89\t Train loss: 0.081726, Accuracy: 93.7%, Test loss: 0.227607 \n",
            "[epoch: 90\t Train loss: 0.080943, Accuracy: 93.7%, Test loss: 0.226431 \n",
            "[epoch: 91\t Train loss: 0.080207, Accuracy: 93.8%, Test loss: 0.225264 \n",
            "[epoch: 92\t Train loss: 0.079457, Accuracy: 93.8%, Test loss: 0.224104 \n",
            "[epoch: 93\t Train loss: 0.078750, Accuracy: 93.9%, Test loss: 0.222956 \n",
            "[epoch: 94\t Train loss: 0.078070, Accuracy: 93.9%, Test loss: 0.221811 \n",
            "[epoch: 95\t Train loss: 0.077395, Accuracy: 93.9%, Test loss: 0.220672 \n",
            "[epoch: 96\t Train loss: 0.076760, Accuracy: 94.0%, Test loss: 0.219546 \n",
            "[epoch: 97\t Train loss: 0.076112, Accuracy: 94.0%, Test loss: 0.218426 \n",
            "[epoch: 98\t Train loss: 0.075466, Accuracy: 94.0%, Test loss: 0.217316 \n",
            "[epoch: 99\t Train loss: 0.074855, Accuracy: 94.0%, Test loss: 0.216217 \n",
            "[epoch: 100\t Train loss: 0.074253, Accuracy: 94.0%, Test loss: 0.215126 \n",
            "[epoch: 101\t Train loss: 0.073668, Accuracy: 94.1%, Test loss: 0.214041 \n",
            "[epoch: 102\t Train loss: 0.073086, Accuracy: 94.1%, Test loss: 0.212962 \n",
            "[epoch: 103\t Train loss: 0.072503, Accuracy: 94.1%, Test loss: 0.211890 \n",
            "[epoch: 104\t Train loss: 0.071914, Accuracy: 94.1%, Test loss: 0.210826 \n",
            "[epoch: 105\t Train loss: 0.071364, Accuracy: 94.1%, Test loss: 0.209767 \n",
            "[epoch: 106\t Train loss: 0.070811, Accuracy: 94.2%, Test loss: 0.208712 \n",
            "[epoch: 107\t Train loss: 0.070268, Accuracy: 94.2%, Test loss: 0.207665 \n",
            "[epoch: 108\t Train loss: 0.069717, Accuracy: 94.2%, Test loss: 0.206626 \n",
            "[epoch: 109\t Train loss: 0.069154, Accuracy: 94.3%, Test loss: 0.205591 \n",
            "[epoch: 110\t Train loss: 0.068633, Accuracy: 94.3%, Test loss: 0.204568 \n",
            "[epoch: 111\t Train loss: 0.068120, Accuracy: 94.3%, Test loss: 0.203554 \n",
            "[epoch: 112\t Train loss: 0.067614, Accuracy: 94.3%, Test loss: 0.202547 \n",
            "[epoch: 113\t Train loss: 0.067118, Accuracy: 94.3%, Test loss: 0.201546 \n",
            "[epoch: 114\t Train loss: 0.066630, Accuracy: 94.4%, Test loss: 0.200557 \n",
            "[epoch: 115\t Train loss: 0.066171, Accuracy: 94.4%, Test loss: 0.199576 \n",
            "[epoch: 116\t Train loss: 0.065701, Accuracy: 94.4%, Test loss: 0.198607 \n",
            "[epoch: 117\t Train loss: 0.065254, Accuracy: 94.4%, Test loss: 0.197649 \n",
            "[epoch: 118\t Train loss: 0.064762, Accuracy: 94.5%, Test loss: 0.196699 \n",
            "[epoch: 119\t Train loss: 0.064270, Accuracy: 94.5%, Test loss: 0.195756 \n",
            "[epoch: 120\t Train loss: 0.063807, Accuracy: 94.5%, Test loss: 0.194822 \n",
            "[epoch: 121\t Train loss: 0.063356, Accuracy: 94.5%, Test loss: 0.193893 \n",
            "[epoch: 122\t Train loss: 0.062922, Accuracy: 94.6%, Test loss: 0.192968 \n",
            "[epoch: 123\t Train loss: 0.062481, Accuracy: 94.6%, Test loss: 0.192050 \n",
            "[epoch: 124\t Train loss: 0.062050, Accuracy: 94.6%, Test loss: 0.191143 \n",
            "[epoch: 125\t Train loss: 0.061606, Accuracy: 94.7%, Test loss: 0.190243 \n",
            "[epoch: 126\t Train loss: 0.061135, Accuracy: 94.7%, Test loss: 0.189350 \n",
            "[epoch: 127\t Train loss: 0.060678, Accuracy: 94.8%, Test loss: 0.188469 \n",
            "[epoch: 128\t Train loss: 0.060244, Accuracy: 94.8%, Test loss: 0.187594 \n",
            "[epoch: 129\t Train loss: 0.059808, Accuracy: 94.8%, Test loss: 0.186728 \n",
            "[epoch: 130\t Train loss: 0.059384, Accuracy: 94.8%, Test loss: 0.185869 \n",
            "[epoch: 131\t Train loss: 0.058987, Accuracy: 94.8%, Test loss: 0.185019 \n",
            "[epoch: 132\t Train loss: 0.058597, Accuracy: 94.8%, Test loss: 0.184174 \n",
            "[epoch: 133\t Train loss: 0.058232, Accuracy: 94.8%, Test loss: 0.183336 \n",
            "[epoch: 134\t Train loss: 0.057882, Accuracy: 94.8%, Test loss: 0.182501 \n",
            "[epoch: 135\t Train loss: 0.057528, Accuracy: 94.8%, Test loss: 0.181672 \n",
            "[epoch: 136\t Train loss: 0.057175, Accuracy: 94.8%, Test loss: 0.180853 \n",
            "[epoch: 137\t Train loss: 0.056839, Accuracy: 94.8%, Test loss: 0.180036 \n",
            "[epoch: 138\t Train loss: 0.056528, Accuracy: 94.8%, Test loss: 0.179228 \n",
            "[epoch: 139\t Train loss: 0.056223, Accuracy: 94.8%, Test loss: 0.178429 \n",
            "[epoch: 140\t Train loss: 0.055921, Accuracy: 94.9%, Test loss: 0.177636 \n",
            "[epoch: 141\t Train loss: 0.055616, Accuracy: 94.9%, Test loss: 0.176850 \n",
            "[epoch: 142\t Train loss: 0.055300, Accuracy: 94.9%, Test loss: 0.176071 \n",
            "[epoch: 143\t Train loss: 0.054968, Accuracy: 94.9%, Test loss: 0.175304 \n",
            "[epoch: 144\t Train loss: 0.054649, Accuracy: 95.0%, Test loss: 0.174542 \n",
            "[epoch: 145\t Train loss: 0.054319, Accuracy: 95.0%, Test loss: 0.173784 \n",
            "[epoch: 146\t Train loss: 0.054000, Accuracy: 95.0%, Test loss: 0.173036 \n",
            "[epoch: 147\t Train loss: 0.053678, Accuracy: 95.1%, Test loss: 0.172293 \n",
            "[epoch: 148\t Train loss: 0.053366, Accuracy: 95.1%, Test loss: 0.171554 \n",
            "[epoch: 149\t Train loss: 0.053052, Accuracy: 95.1%, Test loss: 0.170821 \n",
            "[epoch: 150\t Train loss: 0.052755, Accuracy: 95.1%, Test loss: 0.170095 \n",
            "[epoch: 151\t Train loss: 0.052466, Accuracy: 95.1%, Test loss: 0.169373 \n",
            "[epoch: 152\t Train loss: 0.052176, Accuracy: 95.2%, Test loss: 0.168659 \n",
            "[epoch: 153\t Train loss: 0.051909, Accuracy: 95.2%, Test loss: 0.167950 \n",
            "[epoch: 154\t Train loss: 0.051654, Accuracy: 95.2%, Test loss: 0.167248 \n",
            "[epoch: 155\t Train loss: 0.051387, Accuracy: 95.2%, Test loss: 0.166550 \n",
            "[epoch: 156\t Train loss: 0.051123, Accuracy: 95.3%, Test loss: 0.165861 \n",
            "[epoch: 157\t Train loss: 0.050857, Accuracy: 95.3%, Test loss: 0.165176 \n",
            "[epoch: 158\t Train loss: 0.050599, Accuracy: 95.3%, Test loss: 0.164496 \n",
            "[epoch: 159\t Train loss: 0.050337, Accuracy: 95.3%, Test loss: 0.163820 \n",
            "[epoch: 160\t Train loss: 0.050093, Accuracy: 95.3%, Test loss: 0.163153 \n",
            "[epoch: 161\t Train loss: 0.049885, Accuracy: 95.3%, Test loss: 0.162492 \n",
            "[epoch: 162\t Train loss: 0.049672, Accuracy: 95.3%, Test loss: 0.161835 \n",
            "[epoch: 163\t Train loss: 0.049452, Accuracy: 95.3%, Test loss: 0.161183 \n",
            "[epoch: 164\t Train loss: 0.049203, Accuracy: 95.3%, Test loss: 0.160541 \n",
            "[epoch: 165\t Train loss: 0.048959, Accuracy: 95.3%, Test loss: 0.159900 \n",
            "[epoch: 166\t Train loss: 0.048696, Accuracy: 95.3%, Test loss: 0.159259 \n",
            "[epoch: 167\t Train loss: 0.048452, Accuracy: 95.3%, Test loss: 0.158625 \n",
            "[epoch: 168\t Train loss: 0.048229, Accuracy: 95.4%, Test loss: 0.157998 \n",
            "[epoch: 169\t Train loss: 0.048010, Accuracy: 95.4%, Test loss: 0.157372 \n",
            "[epoch: 170\t Train loss: 0.047808, Accuracy: 95.4%, Test loss: 0.156752 \n",
            "[epoch: 171\t Train loss: 0.047604, Accuracy: 95.4%, Test loss: 0.156139 \n",
            "[epoch: 172\t Train loss: 0.047423, Accuracy: 95.4%, Test loss: 0.155535 \n",
            "[epoch: 173\t Train loss: 0.047236, Accuracy: 95.5%, Test loss: 0.154936 \n",
            "[epoch: 174\t Train loss: 0.047043, Accuracy: 95.5%, Test loss: 0.154340 \n",
            "[epoch: 175\t Train loss: 0.046840, Accuracy: 95.5%, Test loss: 0.153745 \n",
            "[epoch: 176\t Train loss: 0.046637, Accuracy: 95.5%, Test loss: 0.153156 \n",
            "[epoch: 177\t Train loss: 0.046438, Accuracy: 95.5%, Test loss: 0.152575 \n",
            "[epoch: 178\t Train loss: 0.046227, Accuracy: 95.5%, Test loss: 0.151998 \n",
            "[epoch: 179\t Train loss: 0.046017, Accuracy: 95.5%, Test loss: 0.151429 \n",
            "[epoch: 180\t Train loss: 0.045826, Accuracy: 95.5%, Test loss: 0.150867 \n",
            "[epoch: 181\t Train loss: 0.045646, Accuracy: 95.5%, Test loss: 0.150304 \n",
            "[epoch: 182\t Train loss: 0.045464, Accuracy: 95.5%, Test loss: 0.149748 \n",
            "[epoch: 183\t Train loss: 0.045284, Accuracy: 95.6%, Test loss: 0.149193 \n",
            "[epoch: 184\t Train loss: 0.045103, Accuracy: 95.6%, Test loss: 0.148638 \n",
            "[epoch: 185\t Train loss: 0.044907, Accuracy: 95.6%, Test loss: 0.148091 \n",
            "[epoch: 186\t Train loss: 0.044731, Accuracy: 95.7%, Test loss: 0.147548 \n",
            "[epoch: 187\t Train loss: 0.044564, Accuracy: 95.7%, Test loss: 0.147010 \n",
            "[epoch: 188\t Train loss: 0.044400, Accuracy: 95.7%, Test loss: 0.146476 \n",
            "[epoch: 189\t Train loss: 0.044238, Accuracy: 95.7%, Test loss: 0.145944 \n",
            "[epoch: 190\t Train loss: 0.044064, Accuracy: 95.7%, Test loss: 0.145415 \n",
            "[epoch: 191\t Train loss: 0.043892, Accuracy: 95.7%, Test loss: 0.144893 \n",
            "[epoch: 192\t Train loss: 0.043715, Accuracy: 95.8%, Test loss: 0.144374 \n",
            "[epoch: 193\t Train loss: 0.043537, Accuracy: 95.8%, Test loss: 0.143859 \n",
            "[epoch: 194\t Train loss: 0.043360, Accuracy: 95.8%, Test loss: 0.143344 \n",
            "[epoch: 195\t Train loss: 0.043183, Accuracy: 95.8%, Test loss: 0.142833 \n",
            "[epoch: 196\t Train loss: 0.043008, Accuracy: 95.8%, Test loss: 0.142327 \n",
            "[epoch: 197\t Train loss: 0.042829, Accuracy: 95.8%, Test loss: 0.141828 \n",
            "[epoch: 198\t Train loss: 0.042658, Accuracy: 95.9%, Test loss: 0.141330 \n",
            "[epoch: 199\t Train loss: 0.042480, Accuracy: 95.9%, Test loss: 0.140839 \n",
            "[epoch: 200\t Train loss: 0.042302, Accuracy: 95.9%, Test loss: 0.140352 \n",
            "[epoch: 201\t Train loss: 0.042120, Accuracy: 95.9%, Test loss: 0.139872 \n",
            "[epoch: 202\t Train loss: 0.041927, Accuracy: 95.9%, Test loss: 0.139396 \n",
            "[epoch: 203\t Train loss: 0.041747, Accuracy: 95.9%, Test loss: 0.138923 \n",
            "[epoch: 204\t Train loss: 0.041554, Accuracy: 95.9%, Test loss: 0.138450 \n",
            "[epoch: 205\t Train loss: 0.041352, Accuracy: 95.9%, Test loss: 0.137983 \n",
            "[epoch: 206\t Train loss: 0.041159, Accuracy: 95.9%, Test loss: 0.137519 \n",
            "[epoch: 207\t Train loss: 0.040966, Accuracy: 95.9%, Test loss: 0.137059 \n",
            "[epoch: 208\t Train loss: 0.040763, Accuracy: 96.0%, Test loss: 0.136601 \n",
            "[epoch: 209\t Train loss: 0.040566, Accuracy: 96.0%, Test loss: 0.136150 \n",
            "[epoch: 210\t Train loss: 0.040372, Accuracy: 96.0%, Test loss: 0.135703 \n",
            "[epoch: 211\t Train loss: 0.040173, Accuracy: 96.0%, Test loss: 0.135259 \n",
            "[epoch: 212\t Train loss: 0.039978, Accuracy: 96.0%, Test loss: 0.134822 \n",
            "[epoch: 213\t Train loss: 0.039789, Accuracy: 96.0%, Test loss: 0.134387 \n",
            "[epoch: 214\t Train loss: 0.039599, Accuracy: 96.0%, Test loss: 0.133954 \n",
            "[epoch: 215\t Train loss: 0.039394, Accuracy: 96.0%, Test loss: 0.133523 \n",
            "[epoch: 216\t Train loss: 0.039206, Accuracy: 96.0%, Test loss: 0.133095 \n",
            "[epoch: 217\t Train loss: 0.039024, Accuracy: 96.0%, Test loss: 0.132672 \n",
            "[epoch: 218\t Train loss: 0.038836, Accuracy: 96.0%, Test loss: 0.132248 \n",
            "[epoch: 219\t Train loss: 0.038656, Accuracy: 96.0%, Test loss: 0.131824 \n",
            "[epoch: 220\t Train loss: 0.038469, Accuracy: 96.0%, Test loss: 0.131405 \n",
            "[epoch: 221\t Train loss: 0.038292, Accuracy: 96.0%, Test loss: 0.130989 \n",
            "[epoch: 222\t Train loss: 0.038102, Accuracy: 96.1%, Test loss: 0.130573 \n",
            "[epoch: 223\t Train loss: 0.037907, Accuracy: 96.1%, Test loss: 0.130162 \n",
            "[epoch: 224\t Train loss: 0.037717, Accuracy: 96.1%, Test loss: 0.129753 \n",
            "[epoch: 225\t Train loss: 0.037525, Accuracy: 96.1%, Test loss: 0.129346 \n",
            "[epoch: 226\t Train loss: 0.037342, Accuracy: 96.1%, Test loss: 0.128941 \n",
            "[epoch: 227\t Train loss: 0.037164, Accuracy: 96.1%, Test loss: 0.128539 \n",
            "[epoch: 228\t Train loss: 0.036971, Accuracy: 96.2%, Test loss: 0.128142 \n",
            "[epoch: 229\t Train loss: 0.036774, Accuracy: 96.2%, Test loss: 0.127742 \n",
            "[epoch: 230\t Train loss: 0.036584, Accuracy: 96.2%, Test loss: 0.127345 \n",
            "[epoch: 231\t Train loss: 0.036388, Accuracy: 96.2%, Test loss: 0.126944 \n",
            "[epoch: 232\t Train loss: 0.036203, Accuracy: 96.2%, Test loss: 0.126552 \n",
            "[epoch: 233\t Train loss: 0.036013, Accuracy: 96.2%, Test loss: 0.126164 \n",
            "[epoch: 234\t Train loss: 0.035828, Accuracy: 96.2%, Test loss: 0.125778 \n",
            "[epoch: 235\t Train loss: 0.035647, Accuracy: 96.2%, Test loss: 0.125393 \n",
            "[epoch: 236\t Train loss: 0.035460, Accuracy: 96.2%, Test loss: 0.125013 \n",
            "[epoch: 237\t Train loss: 0.035277, Accuracy: 96.2%, Test loss: 0.124636 \n",
            "[epoch: 238\t Train loss: 0.035092, Accuracy: 96.2%, Test loss: 0.124264 \n",
            "[epoch: 239\t Train loss: 0.034912, Accuracy: 96.2%, Test loss: 0.123893 \n",
            "[epoch: 240\t Train loss: 0.034737, Accuracy: 96.3%, Test loss: 0.123525 \n",
            "[epoch: 241\t Train loss: 0.034560, Accuracy: 96.3%, Test loss: 0.123158 \n",
            "[epoch: 242\t Train loss: 0.034382, Accuracy: 96.3%, Test loss: 0.122793 \n",
            "[epoch: 243\t Train loss: 0.034226, Accuracy: 96.3%, Test loss: 0.122429 \n",
            "[epoch: 244\t Train loss: 0.034066, Accuracy: 96.3%, Test loss: 0.122071 \n",
            "[epoch: 245\t Train loss: 0.033904, Accuracy: 96.3%, Test loss: 0.121710 \n",
            "[epoch: 246\t Train loss: 0.033748, Accuracy: 96.3%, Test loss: 0.121351 \n",
            "[epoch: 247\t Train loss: 0.033594, Accuracy: 96.3%, Test loss: 0.120994 \n",
            "[epoch: 248\t Train loss: 0.033440, Accuracy: 96.3%, Test loss: 0.120642 \n",
            "[epoch: 249\t Train loss: 0.033300, Accuracy: 96.4%, Test loss: 0.120296 \n",
            "[epoch: 250\t Train loss: 0.033158, Accuracy: 96.4%, Test loss: 0.119953 \n",
            "[epoch: 251\t Train loss: 0.033009, Accuracy: 96.4%, Test loss: 0.119615 \n",
            "[epoch: 252\t Train loss: 0.032864, Accuracy: 96.4%, Test loss: 0.119276 \n",
            "[epoch: 253\t Train loss: 0.032726, Accuracy: 96.4%, Test loss: 0.118942 \n",
            "[epoch: 254\t Train loss: 0.032575, Accuracy: 96.4%, Test loss: 0.118611 \n",
            "[epoch: 255\t Train loss: 0.032443, Accuracy: 96.5%, Test loss: 0.118285 \n",
            "[epoch: 256\t Train loss: 0.032305, Accuracy: 96.5%, Test loss: 0.117957 \n",
            "[epoch: 257\t Train loss: 0.032163, Accuracy: 96.5%, Test loss: 0.117637 \n",
            "[epoch: 258\t Train loss: 0.032024, Accuracy: 96.5%, Test loss: 0.117312 \n",
            "[epoch: 259\t Train loss: 0.031874, Accuracy: 96.5%, Test loss: 0.116994 \n",
            "[epoch: 260\t Train loss: 0.031729, Accuracy: 96.5%, Test loss: 0.116680 \n",
            "[epoch: 261\t Train loss: 0.031585, Accuracy: 96.5%, Test loss: 0.116364 \n",
            "[epoch: 262\t Train loss: 0.031431, Accuracy: 96.5%, Test loss: 0.116050 \n",
            "[epoch: 263\t Train loss: 0.031277, Accuracy: 96.5%, Test loss: 0.115737 \n",
            "[epoch: 264\t Train loss: 0.031124, Accuracy: 96.5%, Test loss: 0.115424 \n",
            "[epoch: 265\t Train loss: 0.030985, Accuracy: 96.5%, Test loss: 0.115118 \n",
            "[epoch: 266\t Train loss: 0.030829, Accuracy: 96.5%, Test loss: 0.114809 \n",
            "[epoch: 267\t Train loss: 0.030679, Accuracy: 96.6%, Test loss: 0.114507 \n",
            "[epoch: 268\t Train loss: 0.030533, Accuracy: 96.6%, Test loss: 0.114205 \n",
            "[epoch: 269\t Train loss: 0.030398, Accuracy: 96.5%, Test loss: 0.113903 \n",
            "[epoch: 270\t Train loss: 0.030249, Accuracy: 96.5%, Test loss: 0.113602 \n",
            "[epoch: 271\t Train loss: 0.030104, Accuracy: 96.6%, Test loss: 0.113306 \n",
            "[epoch: 272\t Train loss: 0.029962, Accuracy: 96.6%, Test loss: 0.113013 \n",
            "[epoch: 273\t Train loss: 0.029821, Accuracy: 96.6%, Test loss: 0.112723 \n",
            "[epoch: 274\t Train loss: 0.029681, Accuracy: 96.6%, Test loss: 0.112437 \n",
            "[epoch: 275\t Train loss: 0.029537, Accuracy: 96.6%, Test loss: 0.112151 \n",
            "[epoch: 276\t Train loss: 0.029389, Accuracy: 96.6%, Test loss: 0.111872 \n",
            "[epoch: 277\t Train loss: 0.029254, Accuracy: 96.6%, Test loss: 0.111592 \n",
            "[epoch: 278\t Train loss: 0.029121, Accuracy: 96.6%, Test loss: 0.111315 \n",
            "[epoch: 279\t Train loss: 0.028977, Accuracy: 96.6%, Test loss: 0.111041 \n",
            "[epoch: 280\t Train loss: 0.028833, Accuracy: 96.7%, Test loss: 0.110767 \n",
            "[epoch: 281\t Train loss: 0.028691, Accuracy: 96.7%, Test loss: 0.110494 \n",
            "[epoch: 282\t Train loss: 0.028562, Accuracy: 96.8%, Test loss: 0.110222 \n",
            "[epoch: 283\t Train loss: 0.028434, Accuracy: 96.8%, Test loss: 0.109954 \n",
            "[epoch: 284\t Train loss: 0.028305, Accuracy: 96.8%, Test loss: 0.109684 \n",
            "[epoch: 285\t Train loss: 0.028175, Accuracy: 96.8%, Test loss: 0.109414 \n",
            "[epoch: 286\t Train loss: 0.028050, Accuracy: 96.8%, Test loss: 0.109147 \n",
            "[epoch: 287\t Train loss: 0.027937, Accuracy: 96.8%, Test loss: 0.108880 \n",
            "[epoch: 288\t Train loss: 0.027824, Accuracy: 96.9%, Test loss: 0.108614 \n",
            "[epoch: 289\t Train loss: 0.027712, Accuracy: 96.9%, Test loss: 0.108351 \n",
            "[epoch: 290\t Train loss: 0.027600, Accuracy: 96.9%, Test loss: 0.108088 \n",
            "[epoch: 291\t Train loss: 0.027484, Accuracy: 96.9%, Test loss: 0.107830 \n",
            "[epoch: 292\t Train loss: 0.027362, Accuracy: 96.9%, Test loss: 0.107574 \n",
            "[epoch: 293\t Train loss: 0.027247, Accuracy: 96.9%, Test loss: 0.107320 \n",
            "[epoch: 294\t Train loss: 0.027125, Accuracy: 96.9%, Test loss: 0.107067 \n",
            "[epoch: 295\t Train loss: 0.027021, Accuracy: 96.9%, Test loss: 0.106814 \n",
            "[epoch: 296\t Train loss: 0.026923, Accuracy: 96.9%, Test loss: 0.106565 \n",
            "[epoch: 297\t Train loss: 0.026816, Accuracy: 96.9%, Test loss: 0.106319 \n",
            "[epoch: 298\t Train loss: 0.026704, Accuracy: 96.9%, Test loss: 0.106074 \n",
            "[epoch: 299\t Train loss: 0.026607, Accuracy: 96.9%, Test loss: 0.105833 \n",
            "[epoch: 300\t Train loss: 0.026497, Accuracy: 96.9%, Test loss: 0.105591 \n",
            "[epoch: 301\t Train loss: 0.026377, Accuracy: 96.9%, Test loss: 0.105349 \n",
            "[epoch: 302\t Train loss: 0.026282, Accuracy: 96.9%, Test loss: 0.105111 \n",
            "[epoch: 303\t Train loss: 0.026175, Accuracy: 96.9%, Test loss: 0.104875 \n",
            "[epoch: 304\t Train loss: 0.026077, Accuracy: 97.0%, Test loss: 0.104640 \n",
            "[epoch: 305\t Train loss: 0.025960, Accuracy: 97.0%, Test loss: 0.104401 \n",
            "[epoch: 306\t Train loss: 0.025866, Accuracy: 97.0%, Test loss: 0.104174 \n",
            "[epoch: 307\t Train loss: 0.025752, Accuracy: 97.0%, Test loss: 0.103943 \n",
            "[epoch: 308\t Train loss: 0.025658, Accuracy: 97.0%, Test loss: 0.103712 \n",
            "[epoch: 309\t Train loss: 0.025540, Accuracy: 97.0%, Test loss: 0.103476 \n",
            "[epoch: 310\t Train loss: 0.025444, Accuracy: 97.0%, Test loss: 0.103246 \n",
            "[epoch: 311\t Train loss: 0.025327, Accuracy: 97.0%, Test loss: 0.103013 \n",
            "[epoch: 312\t Train loss: 0.025219, Accuracy: 97.0%, Test loss: 0.102786 \n",
            "[epoch: 313\t Train loss: 0.025100, Accuracy: 97.0%, Test loss: 0.102558 \n",
            "[epoch: 314\t Train loss: 0.025002, Accuracy: 97.0%, Test loss: 0.102340 \n",
            "[epoch: 315\t Train loss: 0.024887, Accuracy: 97.0%, Test loss: 0.102120 \n",
            "[epoch: 316\t Train loss: 0.024782, Accuracy: 97.0%, Test loss: 0.101903 \n",
            "[epoch: 317\t Train loss: 0.024680, Accuracy: 97.1%, Test loss: 0.101687 \n",
            "[epoch: 318\t Train loss: 0.024579, Accuracy: 97.1%, Test loss: 0.101466 \n",
            "[epoch: 319\t Train loss: 0.024476, Accuracy: 97.1%, Test loss: 0.101253 \n",
            "[epoch: 320\t Train loss: 0.024367, Accuracy: 97.1%, Test loss: 0.101039 \n",
            "[epoch: 321\t Train loss: 0.024271, Accuracy: 97.1%, Test loss: 0.100824 \n",
            "[epoch: 322\t Train loss: 0.024158, Accuracy: 97.1%, Test loss: 0.100609 \n",
            "[epoch: 323\t Train loss: 0.024055, Accuracy: 97.1%, Test loss: 0.100400 \n",
            "[epoch: 324\t Train loss: 0.023949, Accuracy: 97.1%, Test loss: 0.100188 \n",
            "[epoch: 325\t Train loss: 0.023854, Accuracy: 97.1%, Test loss: 0.099982 \n",
            "[epoch: 326\t Train loss: 0.023743, Accuracy: 97.1%, Test loss: 0.099774 \n",
            "[epoch: 327\t Train loss: 0.023639, Accuracy: 97.1%, Test loss: 0.099568 \n",
            "[epoch: 328\t Train loss: 0.023553, Accuracy: 97.1%, Test loss: 0.099364 \n",
            "[epoch: 329\t Train loss: 0.023454, Accuracy: 97.1%, Test loss: 0.099161 \n",
            "[epoch: 330\t Train loss: 0.023356, Accuracy: 97.1%, Test loss: 0.098959 \n",
            "[epoch: 331\t Train loss: 0.023258, Accuracy: 97.1%, Test loss: 0.098760 \n",
            "[epoch: 332\t Train loss: 0.023166, Accuracy: 97.1%, Test loss: 0.098560 \n",
            "[epoch: 333\t Train loss: 0.023057, Accuracy: 97.1%, Test loss: 0.098363 \n",
            "[epoch: 334\t Train loss: 0.022965, Accuracy: 97.2%, Test loss: 0.098166 \n",
            "[epoch: 335\t Train loss: 0.022872, Accuracy: 97.2%, Test loss: 0.097975 \n",
            "[epoch: 336\t Train loss: 0.022788, Accuracy: 97.2%, Test loss: 0.097781 \n",
            "[epoch: 337\t Train loss: 0.022695, Accuracy: 97.2%, Test loss: 0.097588 \n",
            "[epoch: 338\t Train loss: 0.022607, Accuracy: 97.2%, Test loss: 0.097395 \n",
            "[epoch: 339\t Train loss: 0.022502, Accuracy: 97.2%, Test loss: 0.097203 \n",
            "[epoch: 340\t Train loss: 0.022425, Accuracy: 97.2%, Test loss: 0.097012 \n",
            "[epoch: 341\t Train loss: 0.022334, Accuracy: 97.2%, Test loss: 0.096821 \n",
            "[epoch: 342\t Train loss: 0.022262, Accuracy: 97.2%, Test loss: 0.096631 \n",
            "[epoch: 343\t Train loss: 0.022179, Accuracy: 97.2%, Test loss: 0.096448 \n",
            "[epoch: 344\t Train loss: 0.022079, Accuracy: 97.2%, Test loss: 0.096259 \n",
            "[epoch: 345\t Train loss: 0.021996, Accuracy: 97.2%, Test loss: 0.096076 \n",
            "[epoch: 346\t Train loss: 0.021906, Accuracy: 97.2%, Test loss: 0.095894 \n",
            "[epoch: 347\t Train loss: 0.021820, Accuracy: 97.2%, Test loss: 0.095713 \n",
            "[epoch: 348\t Train loss: 0.021734, Accuracy: 97.2%, Test loss: 0.095534 \n",
            "[epoch: 349\t Train loss: 0.021648, Accuracy: 97.2%, Test loss: 0.095354 \n",
            "[epoch: 350\t Train loss: 0.021561, Accuracy: 97.3%, Test loss: 0.095174 \n",
            "[epoch: 351\t Train loss: 0.021451, Accuracy: 97.3%, Test loss: 0.094997 \n",
            "[epoch: 352\t Train loss: 0.021375, Accuracy: 97.3%, Test loss: 0.094816 \n",
            "[epoch: 353\t Train loss: 0.021276, Accuracy: 97.3%, Test loss: 0.094638 \n",
            "[epoch: 354\t Train loss: 0.021184, Accuracy: 97.3%, Test loss: 0.094465 \n",
            "[epoch: 355\t Train loss: 0.021101, Accuracy: 97.3%, Test loss: 0.094290 \n",
            "[epoch: 356\t Train loss: 0.021010, Accuracy: 97.3%, Test loss: 0.094118 \n",
            "[epoch: 357\t Train loss: 0.020927, Accuracy: 97.3%, Test loss: 0.093948 \n",
            "[epoch: 358\t Train loss: 0.020836, Accuracy: 97.3%, Test loss: 0.093780 \n",
            "[epoch: 359\t Train loss: 0.020754, Accuracy: 97.3%, Test loss: 0.093609 \n",
            "[epoch: 360\t Train loss: 0.020658, Accuracy: 97.3%, Test loss: 0.093440 \n",
            "[epoch: 361\t Train loss: 0.020568, Accuracy: 97.3%, Test loss: 0.093271 \n",
            "[epoch: 362\t Train loss: 0.020490, Accuracy: 97.3%, Test loss: 0.093105 \n",
            "[epoch: 363\t Train loss: 0.020409, Accuracy: 97.3%, Test loss: 0.092935 \n",
            "[epoch: 364\t Train loss: 0.020320, Accuracy: 97.4%, Test loss: 0.092772 \n",
            "[epoch: 365\t Train loss: 0.020230, Accuracy: 97.4%, Test loss: 0.092602 \n",
            "[epoch: 366\t Train loss: 0.020135, Accuracy: 97.4%, Test loss: 0.092442 \n",
            "[epoch: 367\t Train loss: 0.020055, Accuracy: 97.4%, Test loss: 0.092275 \n",
            "[epoch: 368\t Train loss: 0.019958, Accuracy: 97.4%, Test loss: 0.092114 \n",
            "[epoch: 369\t Train loss: 0.019870, Accuracy: 97.4%, Test loss: 0.091952 \n",
            "[epoch: 370\t Train loss: 0.019781, Accuracy: 97.4%, Test loss: 0.091794 \n",
            "[epoch: 371\t Train loss: 0.019694, Accuracy: 97.4%, Test loss: 0.091635 \n",
            "[epoch: 372\t Train loss: 0.019607, Accuracy: 97.4%, Test loss: 0.091477 \n",
            "[epoch: 373\t Train loss: 0.019513, Accuracy: 97.4%, Test loss: 0.091323 \n",
            "[epoch: 374\t Train loss: 0.019421, Accuracy: 97.4%, Test loss: 0.091163 \n",
            "[epoch: 375\t Train loss: 0.019339, Accuracy: 97.4%, Test loss: 0.091008 \n",
            "[epoch: 376\t Train loss: 0.019258, Accuracy: 97.4%, Test loss: 0.090855 \n",
            "[epoch: 377\t Train loss: 0.019178, Accuracy: 97.4%, Test loss: 0.090704 \n",
            "[epoch: 378\t Train loss: 0.019102, Accuracy: 97.4%, Test loss: 0.090550 \n",
            "[epoch: 379\t Train loss: 0.019015, Accuracy: 97.4%, Test loss: 0.090400 \n",
            "[epoch: 380\t Train loss: 0.018935, Accuracy: 97.4%, Test loss: 0.090251 \n",
            "[epoch: 381\t Train loss: 0.018861, Accuracy: 97.4%, Test loss: 0.090102 \n",
            "[epoch: 382\t Train loss: 0.018782, Accuracy: 97.4%, Test loss: 0.089949 \n",
            "[epoch: 383\t Train loss: 0.018707, Accuracy: 97.4%, Test loss: 0.089802 \n",
            "[epoch: 384\t Train loss: 0.018636, Accuracy: 97.4%, Test loss: 0.089657 \n",
            "[epoch: 385\t Train loss: 0.018561, Accuracy: 97.4%, Test loss: 0.089512 \n",
            "[epoch: 386\t Train loss: 0.018486, Accuracy: 97.4%, Test loss: 0.089367 \n",
            "[epoch: 387\t Train loss: 0.018407, Accuracy: 97.4%, Test loss: 0.089222 \n",
            "[epoch: 388\t Train loss: 0.018338, Accuracy: 97.4%, Test loss: 0.089079 \n",
            "[epoch: 389\t Train loss: 0.018266, Accuracy: 97.5%, Test loss: 0.088934 \n",
            "[epoch: 390\t Train loss: 0.018200, Accuracy: 97.5%, Test loss: 0.088794 \n",
            "[epoch: 391\t Train loss: 0.018117, Accuracy: 97.5%, Test loss: 0.088646 \n",
            "[epoch: 392\t Train loss: 0.018058, Accuracy: 97.5%, Test loss: 0.088507 \n",
            "[epoch: 393\t Train loss: 0.017975, Accuracy: 97.5%, Test loss: 0.088368 \n",
            "[epoch: 394\t Train loss: 0.017926, Accuracy: 97.5%, Test loss: 0.088232 \n",
            "[epoch: 395\t Train loss: 0.017834, Accuracy: 97.5%, Test loss: 0.088093 \n",
            "[epoch: 396\t Train loss: 0.017772, Accuracy: 97.5%, Test loss: 0.087961 \n",
            "[epoch: 397\t Train loss: 0.017698, Accuracy: 97.5%, Test loss: 0.087821 \n",
            "[epoch: 398\t Train loss: 0.017633, Accuracy: 97.5%, Test loss: 0.087687 \n",
            "[epoch: 399\t Train loss: 0.017568, Accuracy: 97.5%, Test loss: 0.087554 \n",
            "[epoch: 400\t Train loss: 0.017499, Accuracy: 97.5%, Test loss: 0.087424 \n",
            "[epoch: 401\t Train loss: 0.017438, Accuracy: 97.5%, Test loss: 0.087291 \n",
            "[epoch: 402\t Train loss: 0.017370, Accuracy: 97.5%, Test loss: 0.087159 \n",
            "[epoch: 403\t Train loss: 0.017308, Accuracy: 97.5%, Test loss: 0.087028 \n",
            "[epoch: 404\t Train loss: 0.017250, Accuracy: 97.5%, Test loss: 0.086898 \n",
            "[epoch: 405\t Train loss: 0.017185, Accuracy: 97.5%, Test loss: 0.086761 \n",
            "[epoch: 406\t Train loss: 0.017127, Accuracy: 97.5%, Test loss: 0.086634 \n",
            "[epoch: 407\t Train loss: 0.017068, Accuracy: 97.5%, Test loss: 0.086507 \n",
            "[epoch: 408\t Train loss: 0.017017, Accuracy: 97.5%, Test loss: 0.086377 \n",
            "[epoch: 409\t Train loss: 0.016939, Accuracy: 97.5%, Test loss: 0.086247 \n",
            "[epoch: 410\t Train loss: 0.016886, Accuracy: 97.5%, Test loss: 0.086122 \n",
            "[epoch: 411\t Train loss: 0.016818, Accuracy: 97.5%, Test loss: 0.085997 \n",
            "[epoch: 412\t Train loss: 0.016761, Accuracy: 97.5%, Test loss: 0.085873 \n",
            "[epoch: 413\t Train loss: 0.016698, Accuracy: 97.5%, Test loss: 0.085748 \n",
            "[epoch: 414\t Train loss: 0.016643, Accuracy: 97.5%, Test loss: 0.085624 \n",
            "[epoch: 415\t Train loss: 0.016586, Accuracy: 97.5%, Test loss: 0.085501 \n",
            "[epoch: 416\t Train loss: 0.016536, Accuracy: 97.5%, Test loss: 0.085380 \n",
            "[epoch: 417\t Train loss: 0.016481, Accuracy: 97.5%, Test loss: 0.085256 \n",
            "[epoch: 418\t Train loss: 0.016422, Accuracy: 97.5%, Test loss: 0.085137 \n",
            "[epoch: 419\t Train loss: 0.016364, Accuracy: 97.6%, Test loss: 0.085018 \n",
            "[epoch: 420\t Train loss: 0.016307, Accuracy: 97.6%, Test loss: 0.084895 \n",
            "[epoch: 421\t Train loss: 0.016250, Accuracy: 97.6%, Test loss: 0.084780 \n",
            "[epoch: 422\t Train loss: 0.016195, Accuracy: 97.6%, Test loss: 0.084662 \n",
            "[epoch: 423\t Train loss: 0.016134, Accuracy: 97.6%, Test loss: 0.084542 \n",
            "[epoch: 424\t Train loss: 0.016077, Accuracy: 97.6%, Test loss: 0.084428 \n",
            "[epoch: 425\t Train loss: 0.016026, Accuracy: 97.6%, Test loss: 0.084313 \n",
            "[epoch: 426\t Train loss: 0.015963, Accuracy: 97.6%, Test loss: 0.084196 \n",
            "[epoch: 427\t Train loss: 0.015912, Accuracy: 97.6%, Test loss: 0.084085 \n",
            "[epoch: 428\t Train loss: 0.015857, Accuracy: 97.6%, Test loss: 0.083969 \n",
            "[epoch: 429\t Train loss: 0.015794, Accuracy: 97.6%, Test loss: 0.083858 \n",
            "[epoch: 430\t Train loss: 0.015739, Accuracy: 97.6%, Test loss: 0.083748 \n",
            "[epoch: 431\t Train loss: 0.015689, Accuracy: 97.6%, Test loss: 0.083639 \n",
            "[epoch: 432\t Train loss: 0.015632, Accuracy: 97.6%, Test loss: 0.083527 \n",
            "[epoch: 433\t Train loss: 0.015588, Accuracy: 97.6%, Test loss: 0.083418 \n",
            "[epoch: 434\t Train loss: 0.015528, Accuracy: 97.6%, Test loss: 0.083310 \n",
            "[epoch: 435\t Train loss: 0.015482, Accuracy: 97.6%, Test loss: 0.083204 \n",
            "[epoch: 436\t Train loss: 0.015426, Accuracy: 97.6%, Test loss: 0.083094 \n",
            "[epoch: 437\t Train loss: 0.015370, Accuracy: 97.6%, Test loss: 0.082985 \n",
            "[epoch: 438\t Train loss: 0.015322, Accuracy: 97.6%, Test loss: 0.082879 \n",
            "[epoch: 439\t Train loss: 0.015259, Accuracy: 97.6%, Test loss: 0.082773 \n",
            "[epoch: 440\t Train loss: 0.015218, Accuracy: 97.6%, Test loss: 0.082668 \n",
            "[epoch: 441\t Train loss: 0.015171, Accuracy: 97.6%, Test loss: 0.082560 \n",
            "[epoch: 442\t Train loss: 0.015112, Accuracy: 97.6%, Test loss: 0.082460 \n",
            "[epoch: 443\t Train loss: 0.015064, Accuracy: 97.6%, Test loss: 0.082353 \n",
            "[epoch: 444\t Train loss: 0.015014, Accuracy: 97.6%, Test loss: 0.082252 \n",
            "[epoch: 445\t Train loss: 0.014966, Accuracy: 97.6%, Test loss: 0.082145 \n",
            "[epoch: 446\t Train loss: 0.014910, Accuracy: 97.6%, Test loss: 0.082043 \n",
            "[epoch: 447\t Train loss: 0.014858, Accuracy: 97.6%, Test loss: 0.081939 \n",
            "[epoch: 448\t Train loss: 0.014812, Accuracy: 97.6%, Test loss: 0.081842 \n",
            "[epoch: 449\t Train loss: 0.014757, Accuracy: 97.6%, Test loss: 0.081740 \n",
            "[epoch: 450\t Train loss: 0.014708, Accuracy: 97.6%, Test loss: 0.081642 \n",
            "[epoch: 451\t Train loss: 0.014657, Accuracy: 97.6%, Test loss: 0.081550 \n",
            "[epoch: 452\t Train loss: 0.014599, Accuracy: 97.6%, Test loss: 0.081451 \n",
            "[epoch: 453\t Train loss: 0.014553, Accuracy: 97.6%, Test loss: 0.081350 \n",
            "[epoch: 454\t Train loss: 0.014513, Accuracy: 97.6%, Test loss: 0.081258 \n",
            "[epoch: 455\t Train loss: 0.014457, Accuracy: 97.6%, Test loss: 0.081158 \n",
            "[epoch: 456\t Train loss: 0.014408, Accuracy: 97.6%, Test loss: 0.081069 \n",
            "[epoch: 457\t Train loss: 0.014348, Accuracy: 97.6%, Test loss: 0.080973 \n",
            "[epoch: 458\t Train loss: 0.014301, Accuracy: 97.6%, Test loss: 0.080881 \n",
            "[epoch: 459\t Train loss: 0.014240, Accuracy: 97.6%, Test loss: 0.080790 \n",
            "[epoch: 460\t Train loss: 0.014192, Accuracy: 97.6%, Test loss: 0.080700 \n",
            "[epoch: 461\t Train loss: 0.014143, Accuracy: 97.6%, Test loss: 0.080614 \n",
            "[epoch: 462\t Train loss: 0.014085, Accuracy: 97.6%, Test loss: 0.080519 \n",
            "[epoch: 463\t Train loss: 0.014039, Accuracy: 97.6%, Test loss: 0.080437 \n",
            "[epoch: 464\t Train loss: 0.013986, Accuracy: 97.6%, Test loss: 0.080349 \n",
            "[epoch: 465\t Train loss: 0.013931, Accuracy: 97.6%, Test loss: 0.080263 \n",
            "[epoch: 466\t Train loss: 0.013880, Accuracy: 97.6%, Test loss: 0.080175 \n",
            "[epoch: 467\t Train loss: 0.013827, Accuracy: 97.6%, Test loss: 0.080084 \n",
            "[epoch: 468\t Train loss: 0.013779, Accuracy: 97.6%, Test loss: 0.079999 \n",
            "[epoch: 469\t Train loss: 0.013730, Accuracy: 97.6%, Test loss: 0.079908 \n",
            "[epoch: 470\t Train loss: 0.013674, Accuracy: 97.6%, Test loss: 0.079821 \n",
            "[epoch: 471\t Train loss: 0.013620, Accuracy: 97.6%, Test loss: 0.079734 \n",
            "[epoch: 472\t Train loss: 0.013572, Accuracy: 97.6%, Test loss: 0.079646 \n",
            "[epoch: 473\t Train loss: 0.013523, Accuracy: 97.7%, Test loss: 0.079557 \n",
            "[epoch: 474\t Train loss: 0.013470, Accuracy: 97.7%, Test loss: 0.079474 \n",
            "[epoch: 475\t Train loss: 0.013417, Accuracy: 97.7%, Test loss: 0.079392 \n",
            "[epoch: 476\t Train loss: 0.013365, Accuracy: 97.7%, Test loss: 0.079308 \n",
            "[epoch: 477\t Train loss: 0.013310, Accuracy: 97.7%, Test loss: 0.079218 \n",
            "[epoch: 478\t Train loss: 0.013269, Accuracy: 97.7%, Test loss: 0.079143 \n",
            "[epoch: 479\t Train loss: 0.013213, Accuracy: 97.7%, Test loss: 0.079057 \n",
            "[epoch: 480\t Train loss: 0.013175, Accuracy: 97.7%, Test loss: 0.078980 \n",
            "[epoch: 481\t Train loss: 0.013121, Accuracy: 97.7%, Test loss: 0.078893 \n",
            "[epoch: 482\t Train loss: 0.013079, Accuracy: 97.7%, Test loss: 0.078817 \n",
            "[epoch: 483\t Train loss: 0.013031, Accuracy: 97.7%, Test loss: 0.078735 \n",
            "[epoch: 484\t Train loss: 0.012985, Accuracy: 97.7%, Test loss: 0.078654 \n",
            "[epoch: 485\t Train loss: 0.012949, Accuracy: 97.7%, Test loss: 0.078574 \n",
            "[epoch: 486\t Train loss: 0.012883, Accuracy: 97.7%, Test loss: 0.078492 \n",
            "[epoch: 487\t Train loss: 0.012847, Accuracy: 97.7%, Test loss: 0.078416 \n",
            "[epoch: 488\t Train loss: 0.012801, Accuracy: 97.7%, Test loss: 0.078338 \n",
            "[epoch: 489\t Train loss: 0.012744, Accuracy: 97.7%, Test loss: 0.078257 \n",
            "[epoch: 490\t Train loss: 0.012687, Accuracy: 97.7%, Test loss: 0.078180 \n",
            "[epoch: 491\t Train loss: 0.012645, Accuracy: 97.7%, Test loss: 0.078101 \n",
            "[epoch: 492\t Train loss: 0.012598, Accuracy: 97.7%, Test loss: 0.078025 \n",
            "[epoch: 493\t Train loss: 0.012544, Accuracy: 97.7%, Test loss: 0.077945 \n",
            "[epoch: 494\t Train loss: 0.012499, Accuracy: 97.7%, Test loss: 0.077871 \n",
            "[epoch: 495\t Train loss: 0.012445, Accuracy: 97.7%, Test loss: 0.077795 \n",
            "[epoch: 496\t Train loss: 0.012403, Accuracy: 97.7%, Test loss: 0.077718 \n",
            "[epoch: 497\t Train loss: 0.012348, Accuracy: 97.7%, Test loss: 0.077646 \n",
            "[epoch: 498\t Train loss: 0.012297, Accuracy: 97.7%, Test loss: 0.077569 \n",
            "[epoch: 499\t Train loss: 0.012256, Accuracy: 97.7%, Test loss: 0.077499 \n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# model parameters setting (will affect performance of the model)\n",
        "lr = 1e-3     # learning rate\n",
        "bs = 64       # batch size\n",
        "epochs = 500    # more epochs the more likely our model is going to learn from the dataset. However, too many epochs will overfit our model\n",
        "\n",
        "loss_fn = nn.CrossEntropyLoss() # Classificatin problem, we use Cross Entropy as loss function\n",
        "\n",
        "optimizer = torch.optim.SGD(model_2NN.parameters(), lr=lr) # an optimizer to update our parameters, we use stochastic gradient descent to reduce the loss.\n",
        "\n",
        "# define how we train our data\n",
        "def train_data(model):\n",
        "    for xb, yb in train_dataloader:   # fetch xb (a batch of images) and yb (a batch of labels) from train_dataloader\n",
        "        preds = model(xb)             # make a prediction\n",
        "        loss = loss_fn(preds, yb)     # compute the loss value\n",
        "        optimizer.zero_grad()         # set our gradient to zero\n",
        "        loss.backward()               # gradient descent\n",
        "        optimizer.step()              # update our weights and biases\n",
        "    loss = loss.item()\n",
        "    # print(f\"Train loss: {loss:>7f}\")\n",
        "    return loss\n",
        "\n",
        "\n",
        "\n",
        "# define how we test our model\n",
        "def test_data(model):\n",
        "  num_batches = len(test_dataloader)\n",
        "  size = len(test_dataloader.dataset)\n",
        "  test_loss, corrects = 0, 0\n",
        "\n",
        "  with torch.no_grad():             # Disabling gradient calculation for reduction of memory consumption for computations\n",
        "      for xb, yb in test_dataloader:\n",
        "          preds = model(xb)\n",
        "          test_loss += loss_fn(preds, yb).item()\n",
        "          corrects += (preds.argmax(1) == yb).type(torch.float).sum().item()\n",
        "  \n",
        "  test_loss /= num_batches\n",
        "  corrects /= size\n",
        "  # print(f\"Test loss: \\n Accuracy: {(100*corrects):>0.1f}%, Avg loss: {test_loss:>8f} \\n\")\n",
        "  return corrects, test_loss\n",
        "\n",
        "lossTR_vals= []\n",
        "lossTT_vals= []\n",
        "accu_vals= []\n",
        "for t in range(epochs):\n",
        "  loss_train_t = train_data(model_2NN)\n",
        "  accu_t, loss_test_t = test_data(model_2NN)\n",
        "  lossTR_vals.append(loss_train_t)\n",
        "  lossTT_vals.append(loss_test_t)\n",
        "  accu_vals.append(accu_t)\n",
        "\n",
        "  if t % 10 == 0:\n",
        "    print(f\"[epoch: {t}\\t Train loss: {loss_train_t:>7f}, Accuracy: {(100*accu_t):>0.1f}%, Test loss: {loss_test_t:>8f} \")\n",
        "\n",
        "# plt.plot(np.linspace(1, epochs,epochs).astype(int), loss_vals)\n",
        "# plt.plot(np.linspace(1, epochs,epochs).astype(int), loss_vals)\n",
        "\n",
        "plt.figure(figsize=(10,5))\n",
        "plt.title(\"Training and Validation Loss\")\n",
        "plt.plot(lossTT_vals,label=\"val\")\n",
        "plt.plot(lossTR_vals,label=\"train\")\n",
        "plt.xlabel(\"iterations\")\n",
        "plt.ylabel(\"Loss\")\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "plt.figure(figsize=(10,5))\n",
        "plt.title(\"Test Data Accuracy\")\n",
        "plt.plot(accu_vals)\n",
        "plt.xlabel(\"iterations\")\n",
        "plt.ylabel(\"Accuracy\")\n",
        "# plt.legend()\n",
        "plt.show()\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [
        "AzC4m8_faVP4"
      ],
      "provenance": [],
      "authorship_tag": "ABX9TyOzFegKXh3GAyR8l4qWv4VN",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}